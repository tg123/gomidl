// Code generated by goyacc -l -o midl.go midl.y. DO NOT EDIT.
package parser

import __yyfmt__ "fmt"
import (
	"github.com/jd3nn1s/gomidl/ast"
	"github.com/jd3nn1s/gomidl/scanner"
)

type yySymType struct {
	yys                 int
	importNode          *ast.ImportNode
	interfaceNode       *ast.InterfaceNode
	interfaceNodeList   []*ast.InterfaceNode
	attributeNode       *ast.AttributeNode
	attributeNodeList   []*ast.AttributeNode
	paramAttrNode       *ast.ParamAttrNode
	paramAttrNodeList   []*ast.ParamAttrNode
	paramNode           *ast.ParamNode
	paramNodeList       []*ast.ParamNode
	methodNode          *ast.MethodNode
	methodNodeList      []*ast.MethodNode
	returnType          *ast.ReturnNode
	enumNode            *ast.EnumNode
	enumValueNode       *ast.EnumValueNode
	enumValueNodeList   []*ast.EnumValueNode
	typedefNode         *ast.TypedefNode
	constdefNode        *ast.ConstdefNode
	libraryNode         *ast.LibraryNode
	importLibNode       *ast.ImportLibNode
	moduleConstantNode  *ast.ModuleConstantNode
	structNode          *ast.StructNode
	structFieldNode     *ast.StructFieldNode
	structFieldNodeList []*ast.StructFieldNode
	coClassNode         *ast.CoClassNode

	int   int
	str   string
	lstr  []string
	node  interface{}
	nodes []interface{}
	bool  bool
	intf  interface{}
}

const INTERFACE = 57346
const IDENT = 57347
const IMPORT = 57348
const STRING = 57349
const CPP_QUOTE = 57350
const MIDL_PRAGMA = 57351
const NUM = 57352
const ENUM = 57353
const TYPEDEF = 57354
const LIBRARY = 57355
const IMPORTLIB = 57356
const MODULE = 57357
const STRUCT = 57358
const COCLASS = 57359
const DEFAULT = 57360
const POINTER_DEFAULT = 57361
const OBJECT = 57362
const UUID = 57363
const OLEAUTOMATION = 57364
const LOCAL = 57365
const HELPSTRING = 57366
const NONCREATABLE = 57367
const LCID = 57368
const VERSION = 57369
const LONG = 57370
const CONST = 57371
const DLLNAME = 57372
const PROPGET = 57373
const PROPPUT = 57374
const ENTRY = 57375
const IN = 57376
const OUT = 57377
const MAX_IS = 57378
const RETVAL = 57379
const SIZE_IS = 57380
const ANNOTATION = 57381
const ATTR_STRING = 57382
const UNIQUE = 57383
const IID_IS = 57384
const V1_ENUM = 57385

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"INTERFACE",
	"IDENT",
	"IMPORT",
	"STRING",
	"CPP_QUOTE",
	"MIDL_PRAGMA",
	"NUM",
	"ENUM",
	"TYPEDEF",
	"LIBRARY",
	"IMPORTLIB",
	"MODULE",
	"STRUCT",
	"COCLASS",
	"DEFAULT",
	"POINTER_DEFAULT",
	"OBJECT",
	"UUID",
	"OLEAUTOMATION",
	"LOCAL",
	"HELPSTRING",
	"NONCREATABLE",
	"LCID",
	"VERSION",
	"LONG",
	"CONST",
	"DLLNAME",
	"PROPGET",
	"PROPPUT",
	"ENTRY",
	"IN",
	"OUT",
	"MAX_IS",
	"RETVAL",
	"SIZE_IS",
	"ANNOTATION",
	"ATTR_STRING",
	"UNIQUE",
	"IID_IS",
	"V1_ENUM",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"';'",
	"'='",
	"':'",
	"','",
	"'|'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'['",
	"']'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 2,
	1, 1,
	-2, 70,
	-1, 233,
	45, 103,
	51, 103,
	-2, 106,
}

const yyPrivate = 57344

const yyLast = 318

var yyAct = [...]int{
	229, 273, 153, 48, 226, 127, 258, 136, 174, 214,
	15, 157, 156, 126, 63, 11, 9, 6, 7, 88,
	14, 281, 64, 90, 13, 14, 12, 16, 90, 14,
	140, 141, 142, 143, 144, 216, 155, 198, 98, 208,
	198, 54, 237, 98, 222, 216, 207, 197, 53, 69,
	168, 151, 17, 240, 274, 134, 119, 128, 17, 28,
	138, 128, 107, 138, 154, 138, 17, 228, 228, 277,
	70, 17, 131, 138, 102, 17, 248, 97, 192, 247,
	270, 251, 96, 93, 95, 89, 271, 252, 167, 84,
	73, 42, 85, 85, 43, 86, 286, 282, 97, 276,
	268, 265, 264, 96, 93, 95, 89, 120, 115, 227,
	246, 245, 70, 70, 75, 129, 39, 31, 29, 30,
	32, 37, 38, 40, 33, 34, 243, 232, 35, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 210, 152,
	172, 36, 204, 169, 170, 146, 233, 133, 130, 114,
	191, 190, 105, 100, 99, 66, 44, 194, 261, 256,
	255, 250, 189, 178, 132, 113, 112, 196, 111, 110,
	109, 108, 61, 209, 202, 201, 200, 199, 121, 71,
	60, 59, 58, 57, 56, 55, 52, 19, 79, 175,
	176, 177, 50, 155, 244, 220, 50, 25, 47, 215,
	25, 212, 195, 46, 217, 24, 23, 218, 24, 234,
	223, 123, 283, 122, 139, 49, 80, 235, 236, 49,
	188, 242, 238, 241, 78, 187, 186, 230, 184, 182,
	288, 185, 253, 183, 181, 260, 180, 117, 262, 259,
	147, 179, 118, 83, 82, 62, 41, 21, 284, 275,
	267, 266, 263, 254, 249, 231, 224, 269, 221, 206,
	205, 203, 272, 193, 150, 149, 148, 65, 278, 124,
	106, 103, 101, 81, 76, 74, 280, 259, 279, 68,
	67, 51, 45, 285, 26, 22, 287, 239, 3, 213,
	289, 18, 91, 145, 8, 87, 2, 1, 4, 77,
	225, 116, 72, 20, 92, 125, 219, 10, 94, 257,
	171, 104, 135, 173, 137, 27, 211, 5,
}

var yyPact = [...]int{
	18, -1000, 18, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 143, 240, 280, 193, 279, 98, -1000, 239,
	43, -1000, 110, 277, 187, 276, 142, -10, -1000, -1000,
	141, 140, -1000, 139, 138, 137, -1000, -1000, 136, -1000,
	-1000, 127, -1000, 238, 262, 109, 275, 274, 15, -1000,
	135, 40, 270, -1000, 98, 269, 183, 206, 268, 237,
	236, -1000, -1000, 42, -1000, 46, 14, 108, 107, 267,
	19, 266, 106, 265, 12, -1000, 126, 125, -1000, -1000,
	124, 123, 121, 120, 101, 262, 232, 9, -1000, -1000,
	134, -1000, -1000, -1000, -1000, -1000, -1000, 196, 264, 0,
	262, 100, 17, 119, 99, 8, -1000, 204, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -22, -1000, -1000, 97,
	-1000, 233, 261, 260, 259, 4, -1000, 7, 95, 41,
	-1000, -1000, -1000, -1000, -1000, 3, 96, 164, 158, 118,
	231, 224, 223, 221, 215, -1000, -1000, 117, 105, 104,
	29, 258, -1000, 191, 95, -1000, -11, -1000, -1000, -1000,
	133, -1000, 132, 131, -1000, -1000, 130, 256, -1000, 94,
	-1000, 255, 254, -12, -1000, -1000, -1000, 129, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 90,
	1, 16, 197, -1000, 15, 253, -14, -1000, 95, 251,
	58, 220, 250, 79, -1000, 102, 164, -1000, 158, 211,
	-1000, -5, 283, 6, -1000, 78, 166, 63, 62, 28,
	249, -1000, -1000, -1000, 116, 36, -1000, 57, -1000, 248,
	115, 114, -1000, 0, 15, -1000, 113, -1000, 234, 247,
	54, -1000, 53, -1000, 246, -1000, -1000, 164, -1000, 52,
	-1000, -1000, 57, -1000, -1000, -1000, -1000, 35, -1000, 7,
	-3, -1000, 244, 51, -1000, -1000, 20, 15, -1000, -1000,
	-1000, 0, 191, -1000, -37, 49, -1000, 202, 243, -1000,
	164, -1000, -1000, 48, -1000, 15, -1000, 225, -3, -1000,
}

var yyPgo = [...]int{
	0, 317, 18, 316, 59, 8, 10, 315, 314, 313,
	7, 312, 311, 310, 6, 309, 11, 12, 5, 17,
	14, 22, 16, 308, 307, 306, 15, 13, 305, 9,
	304, 303, 1, 302, 301, 3, 300, 4, 299, 298,
	288, 19, 297, 296, 295, 0, 294, 293, 292, 289,
	2,
}

var yyR1 = [...]int{
	0, 42, 43, 43, 40, 40, 40, 40, 40, 40,
	40, 40, 39, 24, 44, 44, 41, 41, 41, 41,
	41, 41, 41, 41, 30, 3, 3, 48, 48, 49,
	49, 49, 49, 29, 46, 25, 25, 26, 28, 28,
	28, 27, 19, 19, 20, 20, 20, 20, 21, 21,
	34, 34, 34, 34, 34, 34, 34, 34, 34, 34,
	34, 34, 1, 31, 31, 22, 33, 33, 2, 2,
	6, 6, 7, 7, 4, 4, 4, 4, 4, 4,
	4, 4, 4, 4, 4, 4, 4, 38, 38, 12,
	12, 12, 11, 11, 10, 8, 8, 9, 9, 5,
	5, 5, 5, 15, 15, 15, 18, 18, 18, 14,
	14, 35, 35, 35, 35, 13, 50, 50, 23, 23,
	32, 32, 17, 17, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 36, 36, 36, 37, 37, 45, 45,
	45, 45, 47, 47,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 4, 7, 1, 2, 1, 5, 1, 1,
	1, 1, 1, 1, 6, 4, 5, 7, 6, 1,
	2, 2, 3, 6, 7, 0, 5, 10, 0, 1,
	2, 6, 6, 9, 0, 1, 3, 2, 3, 1,
	1, 1, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 1, 3, 6, 0, 2, 6, 5,
	0, 3, 1, 3, 0, 1, 4, 4, 1, 4,
	4, 4, 1, 1, 4, 1, 1, 1, 1, 0,
	2, 3, 2, 3, 6, 0, 3, 1, 3, 0,
	1, 1, 4, 0, 1, 3, 0, 3, 4, 7,
	5, 1, 1, 4, 2, 5, 0, 1, 6, 6,
	0, 2, 1, 3, 1, 1, 4, 1, 4, 4,
	1, 1, 4, 1, 3, 2, 1, 2, 0, 1,
	2, 3, 0, 1,
}

var yyChk = [...]int{
	-1000, -42, -43, -40, -39, -1, -19, -2, -46, -22,
	-24, -26, 8, 6, 11, -6, 9, 57, -40, 44,
	-31, 7, 5, 13, 12, 4, 5, -7, -4, 20,
	21, 19, 22, 26, 27, 30, 43, 23, 24, 18,
	25, 7, 48, 51, 46, 5, 16, 11, -35, 28,
	5, 5, 44, 58, 51, 44, 44, 44, 44, 44,
	44, 45, 7, -20, -21, 5, 46, 5, 5, -45,
	55, 44, -33, 50, 5, -4, 5, -38, 41, 5,
	10, 5, 7, 7, 47, 51, 49, -44, -41, -2,
	14, -48, -30, -22, -23, -19, -26, -6, 29, 46,
	46, 5, 55, 5, -12, 46, 5, 50, 45, 45,
	45, 45, 45, 45, 48, -21, -34, 5, 10, 47,
	-41, 44, 17, 15, 5, -28, -27, -18, 57, -20,
	48, 55, 45, 48, 47, -11, -10, -8, 57, 10,
	52, 53, 54, 55, 56, -47, 48, 7, 5, 5,
	5, 47, -27, -50, 57, 29, -17, -16, 34, 35,
	36, 37, 38, 39, 40, 41, 42, 47, 47, -10,
	48, -13, -50, -9, -5, 31, 32, 33, 45, 10,
	5, 10, 5, 10, 5, 10, 5, 10, 5, 45,
	46, 46, 49, 5, -35, 11, -17, 58, 51, 44,
	44, 44, 44, 5, 48, 5, 5, 58, 51, 44,
	48, -3, -6, -49, -29, -10, 29, 7, 10, -25,
	-45, 5, 58, -16, 5, -36, -37, 51, 10, -45,
	7, 5, 48, 44, -50, -5, 7, 47, -6, 4,
	47, -29, -10, 48, 28, 48, 48, 51, 48, 5,
	45, 45, 51, -37, 5, 45, 45, -15, -14, -18,
	-45, 45, 4, 5, 48, 48, 5, -50, 48, -37,
	45, 51, -50, -32, 57, 5, 48, 49, -45, -14,
	-35, 58, 48, 10, 5, -50, 48, -45, 5, -32,
}

var yyDef = [...]int{
	70, -2, -2, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 0, 0, 0, 0, 0, 74, 3, 0,
	0, 63, 0, 0, 0, 0, 0, 0, 72, 75,
	0, 0, 78, 0, 0, 0, 82, 83, 0, 85,
	86, 0, 62, 0, 44, 0, 0, 0, 138, 111,
	112, 66, 0, 71, 74, 0, 0, 0, 0, 0,
	0, 12, 64, 0, 45, 49, 70, 0, 114, 0,
	139, 0, 89, 0, 0, 73, 0, 0, 87, 88,
	0, 0, 0, 0, 0, 47, 0, 70, 14, 16,
	0, 18, 19, 20, 21, 22, 23, 0, 0, 38,
	44, 0, 140, 0, 69, 95, 67, 0, 76, 77,
	79, 80, 81, 84, 42, 46, 48, 50, 51, 142,
	15, 0, 0, 0, 0, 106, 39, 116, 0, 0,
	65, 141, 113, 68, 90, 95, 0, 116, 99, 0,
	0, 0, 0, 0, 0, 13, 143, 0, 0, 0,
	0, 0, 40, 0, 0, 117, 0, 122, 124, 125,
	0, 127, 0, 0, 130, 131, 0, 0, 91, 0,
	92, 0, 0, 0, 97, 100, 101, 0, 34, 52,
	53, 54, 55, 56, 57, 58, 59, 60, 61, 0,
	70, 95, 0, 35, 138, 0, 0, 107, 0, 0,
	138, 0, 0, 0, 93, 0, 116, 96, 99, 0,
	17, 70, 0, 95, 29, 0, 0, 0, 0, 0,
	0, 114, 108, 123, 0, 0, 133, 138, 136, 0,
	0, 0, 43, -2, 138, 98, 0, 24, 0, 0,
	28, 31, 0, 30, 0, 118, 119, 116, 37, 0,
	126, 128, 138, 135, 137, 129, 132, 0, 104, 116,
	120, 102, 0, 0, 27, 32, 0, 138, 41, 134,
	94, 106, 0, 115, 0, 0, 25, 0, 0, 105,
	116, 121, 26, 0, 36, 138, 33, 110, 120, 109,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	44, 45, 55, 53, 51, 54, 3, 56, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 50, 48,
	3, 49, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 57, 3, 58, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 46, 52, 47,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			setResult(yylex, yyVAL.nodes)
		}
	case 2:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				yyVAL.nodes = []interface{}{yyDollar[1].node}
			} else {
				yyVAL.nodes = []interface{}{}
			}
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if yyDollar[2].node != nil {
				yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[2].node)
			}
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].intf
		}
	case 5:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].importNode
		}
	case 6:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].enumNode
		}
	case 7:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].interfaceNode
		}
	case 8:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = nil
		}
	case 9:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].typedefNode
		}
	case 10:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].libraryNode
		}
	case 11:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].structNode
		}
	case 12:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.intf = nil
		}
	case 13:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.libraryNode = &ast.LibraryNode{
				Name:       yyDollar[3].str,
				Attributes: yyDollar[1].attributeNodeList,
				Nodes:      yyDollar[5].nodes,
			}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].node != nil {
				yyVAL.nodes = []interface{}{interface{}(yyDollar[1].node)}
			} else {
				yyVAL.nodes = []interface{}{}
			}
		}
	case 15:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			if yyDollar[2].node != nil {
				yyVAL.nodes = append(yyDollar[1].nodes, yyDollar[2].node)
			}
		}
	case 16:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].interfaceNode
		}
	case 17:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.node = &ast.ImportLibNode{
				Filename: yyDollar[3].str,
			}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = &ast.ModuleNode{}
		}
	case 19:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].coClassNode
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].typedefNode
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].constdefNode
		}
	case 22:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].enumNode
		}
	case 23:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.node = yyDollar[1].structNode
		}
	case 24:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.coClassNode = &ast.CoClassNode{
				Name:       yyDollar[3].str,
				Attributes: yyDollar[1].attributeNodeList,
				Interfaces: yyDollar[5].interfaceNodeList,
			}
		}
	case 25:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.interfaceNodeList = []*ast.InterfaceNode{{
				Name: yyDollar[3].str,
			}}
		}
	case 26:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.interfaceNodeList = append(yyDollar[1].interfaceNodeList, &ast.InterfaceNode{
				Name: yyDollar[4].str,
			})
		}
	case 33:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.moduleConstantNode = &ast.ModuleConstantNode{
				Name: yyDollar[3].str,
				Val:  yyDollar[5].str,
			}
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.lstr = nil
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.lstr = append(yyDollar[1].lstr, yyDollar[5].str)
		}
	case 37:
		yyDollar = yyS[yypt-10 : yypt+1]
		{
			yyVAL.structNode = &ast.StructNode{
				Name:   yyDollar[8].str,
				Alias:  yyDollar[9].lstr,
				Fields: yyDollar[6].structFieldNodeList,
			}
		}
	case 38:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.structFieldNodeList = []*ast.StructFieldNode{}
		}
	case 39:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.structFieldNodeList = []*ast.StructFieldNode{yyDollar[1].structFieldNode}
		}
	case 40:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.structFieldNodeList = append(yyDollar[1].structFieldNodeList, yyDollar[2].structFieldNode)
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.structFieldNode = &ast.StructFieldNode{
				Type:         yyDollar[3].str,
				Name:         yyDollar[5].str,
				Indirections: yyDollar[4].int,
				Attributes:   yyDollar[1].paramAttrNodeList,
			}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.enumNode = &ast.EnumNode{
				Name:   yyDollar[2].str,
				Values: yyDollar[4].enumValueNodeList,
			}
		}
	case 43:
		yyDollar = yyS[yypt-9 : yypt+1]
		{
			yyVAL.enumNode = &ast.EnumNode{
				Name:   yyDollar[8].str,
				Values: yyDollar[6].enumValueNodeList,
			}
		}
	case 44:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.enumValueNodeList = []*ast.EnumValueNode{}
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].enumValueNode != nil {
				yyVAL.enumValueNodeList = []*ast.EnumValueNode{yyDollar[1].enumValueNode}
			} else {
				yyVAL.enumValueNodeList = []*ast.EnumValueNode{}
			}
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].enumValueNode != nil {
				yyVAL.enumValueNodeList = append(yyDollar[1].enumValueNodeList, yyDollar[3].enumValueNode)
			} else {
				yyVAL.enumValueNodeList = yyDollar[1].enumValueNodeList
			}
		}
	case 48:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.enumValueNode = &ast.EnumValueNode{
				Name: yyDollar[1].str,
				Val:  yyDollar[3].str,
			}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.enumValueNode = &ast.EnumValueNode{
				Name: yyDollar[1].str,
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 51:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 52:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "|" + yyDollar[3].str
		}
	case 53:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "|" + yyDollar[3].str
		}
	case 54:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "+" + yyDollar[3].str
		}
	case 55:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "+" + yyDollar[3].str
		}
	case 56:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "-" + yyDollar[3].str
		}
	case 57:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "-" + yyDollar[3].str
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "*" + yyDollar[3].str
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "*" + yyDollar[3].str
		}
	case 60:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "/" + yyDollar[3].str
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "/" + yyDollar[3].str
		}
	case 62:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.importNode = &ast.ImportNode{Files: yyDollar[2].lstr}
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.lstr = []string{yyDollar[1].str}
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.lstr = append(yyDollar[1].lstr, yyDollar[3].str)
		}
	case 65:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.typedefNode = &ast.TypedefNode{
				Type:        yyDollar[3].str,
				Indirection: yyDollar[4].int,
				Name:        yyDollar[5].str,
				Attributes:  yyDollar[1].attributeNodeList,
			}
		}
	case 66:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.str = ""
		}
	case 67:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 68:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.interfaceNode = &ast.InterfaceNode{
				Name:       yyDollar[3].str,
				ParentName: yyDollar[4].str,
				Attributes: yyDollar[1].attributeNodeList,
				Methods:    yyDollar[5].methodNodeList,
			}
		}
	case 69:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.interfaceNode = &ast.InterfaceNode{
				Name:       yyDollar[3].str,
				ParentName: yyDollar[4].str,
				Attributes: yyDollar[1].attributeNodeList,
				Methods:    yyDollar[5].methodNodeList,
			}
		}
	case 70:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.attributeNodeList = []*ast.AttributeNode{}
		}
	case 71:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.attributeNodeList = yyDollar[2].attributeNodeList
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].attributeNode != nil {
				yyVAL.attributeNodeList = []*ast.AttributeNode{yyDollar[1].attributeNode}
			} else {
				yyVAL.attributeNodeList = []*ast.AttributeNode{}
			}
		}
	case 73:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].attributeNode != nil {
				yyVAL.attributeNodeList = append(yyDollar[1].attributeNodeList, yyDollar[3].attributeNode)
			}
		}
	case 74:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.attributeNode = nil
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.OBJECT}
		}
	case 76:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.UUID, Val: yyDollar[3].str}
		}
	case 77:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.POINTER_DEFAULT, Val: yyDollar[3].str}
		}
	case 78:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.OLEAUTOMATION}
		}
	case 79:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.LCID, Val: yyDollar[3].str}
		}
	case 80:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.VERSION, Val: yyDollar[3].str}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.DLLNAME, Val: yyDollar[3].str}
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.V1_ENUM}
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.LOCAL}
		}
	case 84:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.HELPSTRING, Val: yyDollar[3].str}
		}
	case 85:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.DEFAULT}
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.NONCREATABLE}
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 89:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.methodNodeList = []*ast.MethodNode{}
		}
	case 90:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.methodNodeList = []*ast.MethodNode{}
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.methodNodeList = yyDollar[2].methodNodeList
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.methodNodeList = []*ast.MethodNode{yyDollar[1].methodNode}
		}
	case 93:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.methodNodeList = append(yyDollar[1].methodNodeList, yyDollar[2].methodNode)
		}
	case 94:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.methodNode = &ast.MethodNode{
				ReturnType: yyDollar[2].returnType,
				Name:       yyDollar[3].str,
				Params:     yyDollar[5].paramNodeList,
			}
		}
	case 95:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.attributeNodeList = []*ast.AttributeNode{}
		}
	case 96:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.attributeNodeList = yyDollar[2].attributeNodeList
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			if yyDollar[1].attributeNode != nil {
				yyVAL.attributeNodeList = []*ast.AttributeNode{yyDollar[1].attributeNode}
			} else {
				yyVAL.attributeNodeList = []*ast.AttributeNode{}
			}
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			if yyDollar[3].attributeNode != nil {
				yyVAL.attributeNodeList = append(yyDollar[1].attributeNodeList, yyDollar[3].attributeNode)
			}
		}
	case 99:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.attributeNode = nil
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.PROPGET}
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.PROPPUT}
		}
	case 102:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.attributeNode = &ast.AttributeNode{Type: scanner.ENTRY, Val: yyDollar[3].str}
		}
	case 103:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.paramNodeList = nil
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.paramNodeList = []*ast.ParamNode{yyDollar[1].paramNode}
		}
	case 105:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.paramNodeList = append(yyDollar[1].paramNodeList, yyDollar[3].paramNode)
		}
	case 106:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.paramAttrNodeList = nil
		}
	case 107:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.paramAttrNodeList = yyDollar[2].paramAttrNodeList
		}
	case 108:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.paramAttrNodeList = append(yyDollar[1].paramAttrNodeList, yyDollar[3].paramAttrNodeList...)
		}
	case 109:
		yyDollar = yyS[yypt-7 : yypt+1]
		{
			yyVAL.paramNode = &ast.ParamNode{
				Attributes:   yyDollar[1].paramAttrNodeList,
				Type:         yyDollar[3].str,
				Indirections: yyDollar[5].int,
				Name:         yyDollar[6].str,
				Array:        yyDollar[7].bool,
			}
		}
	case 110:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.paramNode = &ast.ParamNode{
				Attributes:   yyDollar[1].paramAttrNodeList,
				Type:         yyDollar[3].str,
				Indirections: yyDollar[5].int,
				Name:         "",
				Array:        false,
			}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 113:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "(" + yyDollar[3].str + ")"
		}
	case 114:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = "enum" + yyDollar[2].str
		}
	case 115:
		yyDollar = yyS[yypt-5 : yypt+1]
		{
			yyVAL.returnType = &ast.ReturnNode{
				Type:         yyDollar[2].str,
				Indirections: yyDollar[4].int,
				Array:        yyDollar[5].bool,
			}
		}
	case 118:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.constdefNode = &ast.ConstdefNode{
				Type: yyDollar[2].str,
				Name: yyDollar[3].str,
				Val:  yyDollar[5].str,
			}
		}
	case 119:
		yyDollar = yyS[yypt-6 : yypt+1]
		{
			yyVAL.constdefNode = &ast.ConstdefNode{
				Type: yyDollar[2].str,
				Name: yyDollar[3].str,
				Val:  yyDollar[5].str,
			}
		}
	case 120:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.bool = false
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.bool = true
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.paramAttrNodeList = []*ast.ParamAttrNode{yyDollar[1].paramAttrNode}
		}
	case 123:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.paramAttrNodeList = append(yyDollar[1].paramAttrNodeList, yyDollar[3].paramAttrNode)
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.IN}
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.OUT}
		}
	case 126:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.MAX_IS, Val: yyDollar[3].str}
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.RETVAL}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.SIZE_IS, Val: yyDollar[3].str}
		}
	case 129:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.ANNOTATION, Val: yyDollar[3].str}
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.STRING}
		}
	case 131:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.UNIQUE}
		}
	case 132:
		yyDollar = yyS[yypt-4 : yypt+1]
		{
			yyVAL.paramAttrNode = &ast.ParamAttrNode{Type: scanner.IDENT, Val: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str + "," + yyDollar[3].str
		}
	case 135:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = "," + yyDollar[2].str
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.str = yyDollar[1].str
		}
	case 137:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.str = yyDollar[2].str
		}
	case 138:
		yyDollar = yyS[yypt-0 : yypt+1]
		{
			yyVAL.int = 0
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
		{
			yyVAL.int = 1
		}
	case 140:
		yyDollar = yyS[yypt-2 : yypt+1]
		{
			yyVAL.int = 2
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
		{
			yyVAL.int = 3
		}
	}
	goto yystack /* stack new state and value */
}
